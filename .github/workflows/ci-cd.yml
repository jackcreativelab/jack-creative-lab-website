name: Ultra Robust CI/CD Pipeline

on:
  push:
    branches: ['main', 'dev']
  pull_request:
    branches: ['main', 'dev']
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  security-events: write

concurrency:
  group: 'pages-${{ github.ref }}'
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Job 1: Code Quality Check (format + lint)
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        id: format-check
        run: |
          pnpm format:check || echo "format_needed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Apply formatting
        if: steps.format-check.outputs.format_needed == 'true'
        run: pnpm format

      - name: Run ESLint
        run: pnpm exec next lint --fix

      - name: Commit and push changes
        if: github.event_name == 'pull_request' && steps.format-check.outputs.format_needed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: apply automated formatting and linting [skip ci]'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          skip_dirty_check: false

  # Job 2: Security Audit
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit (blocking on high/critical)
        run: pnpm audit --audit-level=high

      - name: Run Snyk Security Scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=all
          command: test

      - name: Upload Snyk results to GitHub Security
        if: env.SNYK_TOKEN != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  # Job 3: Type Check & Linting
  validate:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Type Check
        run: pnpm tsc --noEmit

      - name: Run Linter (strict)
        run: pnpm lint

  # Job 6: Build Application
  build:
    needs: [security, validate]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            ~/.npm
          key: ${{ runner.os }}-nextjs-${{ hashFiles(''''**/pnpm-lock.yaml'''') }}-${{ hashFiles(''''**/*.js'''', ''''**/*.jsx'''', ''''**/*.ts'''', ''''**/*.tsx'''') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles(''''**/pnpm-lock.yaml'''') }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build with Next.js
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          if [ ! -d "./out" ]; then
            echo "Error: Build output directory not found"
            exit 1
          fi
          echo "Build size: $(du -sh ./out)"

      # - name: Run Lighthouse CI
      #   run: |
      #     npm install -g @lhci/cli
      #     lhci autorun || echo "Lighthouse CI completed"
      #   continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Job 7: Deploy to Production
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4